{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Chef Proxy via Squid ASG [1.8.1]",
  "Parameters": {
    "ProxyElbCNAME": {
      "Type": "String",
      "Default": "chef-proxy",
      "Description": "DNS CNAME for the Chef Proxy ELB"
    },
    "ChefProxyPort": {
      "Default": "3128",
      "Description": "",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ChefHttpsPort": {
      "Default": "443",
      "Description": "",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "InstanceAMI": {
      "Description": "Machine Image",
      "Type": "String",
      "Default": "ami-00000000",
      "AllowedPattern": "ami-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws image id"
    },
    "ProxyInstanceType": {
      "Description": "EC2 Instance Type",
      "Type": "String",
      "Default": "m1.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "cr1.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "a valid EC2 instance type."
    },
    "RootDiskSize": {
      "Description": "Disk Size (gb)",
      "Default": "12",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "2000"
    },
    "MaxProvisionTime": {
      "Default": "1500",
      "Description": "Provision wait time (s)",
      "Type": "Number",
      "MinValue": "120",
      "MaxValue": "3600"
    },
    "ProxyMinAS": {
      "Default": "1",
      "Description": "minimum number of proxy nodes",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ProxyMaxAS": {
      "Default": "1",
      "Description": "maximum number of proxy nodes",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ProxyScaleUpCount": {
      "Default": "1",
      "Description": "scale up count",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "4"
    },
    "ProxyScaleDownCount": {
      "Default": "-1",
      "Description": "scale up count",
      "Type": "Number",
      "MinValue": "-4",
      "MaxValue": "-1"
    },
    "NodeName": {
      "Type": "String",
      "Default": "chefproxy",
      "Description": "string"
    },
    "NodeIndex": {
      "Type": "String",
      "Default": "00",
      "Description": "string"
    },
    "ChefRoles": {
      "Type": "String",
      "Default": "base,chef-proxy",
      "Description": "string"
    },
    "ChefEnv": {
      "Type": "String",
      "Description": "string"
    },
    "InternalAccessSG": {
      "Description": "Security Group ID",
      "Type": "String",
      "Default": "sg-00000000",
      "AllowedPattern": "sg-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws security group id"
    },
    "ExternalAccessSG": {
      "Description": "Security Group ID",
      "Type": "String",
      "Default": "sg-00000000",
      "AllowedPattern": "sg-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws security group id"
    },
    "ChefOrg": {
      "Type": "String",
      "Description": "string"
    },
    "ChefServerURL": {
      "Type": "String",
      "Description": "string"
    },
    "ChefProxyURL": {
      "Type": "String",
      "Description": "string"
    },
    "AppInstanceProfile": {
      "Type": "String",
      "Description": "string"
    },
    "KeyPair": {
      "Description": "",
      "Type": "String",
      "Default": "no-key",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "a valid key"
    },
    "PublicBucketName": {
      "Description": "S3 Bucket Name",
      "Type": "String",
      "AllowedPattern": "[-A-Za-z0-9.]{2,64}",
      "ConstraintDescription": "a S3 bucket name"
    },
    "PrivateBucketName": {
      "Description": "S3 Bucket Name",
      "Type": "String",
      "AllowedPattern": "[-A-Za-z0-9.]{2,64}",
      "ConstraintDescription": "a S3 bucket name"
    },
    "OpsAlertsTopic": {
      "Type": "String",
      "Description": "string"
    },
    "VpcId": {
      "Description": "VPC ID",
      "Type": "String",
      "Default": "vpc-00000000",
      "AllowedPattern": "vpc-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws vpc id"
    },
    "VpcCidr": {
      "Description": "",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "a valid CIDR specification"
    },
    "AZ1": {
      "Description": "Availability Zone",
      "Type": "String",
      "AllowedPattern": "[a-z]*-[a-z]*-[1-9][a-z]",
      "ConstraintDescription": "must be a valid AZ"
    },
    "AZ2": {
      "Description": "Availability Zone",
      "Type": "String",
      "AllowedPattern": "[a-z]*-[a-z]*-[1-9][a-z]",
      "ConstraintDescription": "must be a valid AZ"
    },
    "Subnet1": {
      "Description": "Subnet Id",
      "Type": "String",
      "Default": "subnet-00000000",
      "AllowedPattern": "subnet-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws subnet id"
    },
    "Subnet2": {
      "Description": "Subnet Id",
      "Type": "String",
      "Default": "subnet-00000000",
      "AllowedPattern": "subnet-[0-9a-f]{8}",
      "ConstraintDescription": "a valid aws subnet id"
    },
    "BootPriority": {
      "Description": "Boot Priority Level",
      "Type": "Number",
      "Default": "1",
      "MinValue": "0"
    },
    "Purpose": {
      "Description": "Instance Purpose",
      "Type": "String",
      "Default": "infrastructure",
      "AllowedPattern": "[A-Za-z0-9_-]+"
    },
    "ExtraHelper": {
      "Type": "String",
      "Description": "Additional Bootstrap Helper. 'none'"
    },
    "Domain": {
      "Description": "app domain",
      "Type": "String",
      "Default": "devops.dev.cloud.synchronoss.net",
      "AllowedPattern": "[-A-Za-z0-9.]+\\.[A-Za-z]{2,4}",
      "ConstraintDescription": "a domain"
    },
    "Project": {
      "Type": "String",
      "Default": "NOPROJECT",
      "Description": "project"
    },
    "Environment": {
      "Type": "String",
      "Default": "NOENVIRONMENT",
      "Description": "environment"
    }
  },
  "Mappings": {
    "BandwidthAlarmsPerInstanceType": {
      "t2.small": {
        "high": "1500000000",
        "low": "360000000"
      },
      "m3.medium": {
        "high": "3000000000",
        "low": "720000000"
      },
      "m3.large": {
        "high": "3000000000",
        "low": "720000000"
      },
      "m3.xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "m3.2xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c4.large": {
        "high": "3000000000",
        "low": "720000000"
      },
      "c4.xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c4.2xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c4.4xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c4.8xlarge": {
        "high": "54000000000",
        "low": "1320000000"
      },
      "c3.large": {
        "high": "3000000000",
        "low": "720000000"
      },
      "c3.xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c3.2xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c3.4xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "c3.8xlarge": {
        "high": "54000000000",
        "low": "1320000000"
      },
      "m1.small": {
        "high": "1500000000",
        "low": "360000000"
      },
      "m1.medium": {
        "high": "3000000000",
        "low": "720000000"
      },
      "m1.large": {
        "high": "3000000000",
        "low": "720000000"
      },
      "m1.xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      },
      "m1.2xlarge": {
        "high": "5400000000",
        "low": "1320000000"
      }
    }
  },
  "Resources": {
    "ChefProxyElbSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "chef proxy elb security group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "ChefProxyElbSG"
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "project",
            "Value": {
              "Ref": "Project"
            }
          }
        ]
      }
    },
    "ChefProxyElbSGrproxyportinin": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ChefProxyElbSG"
        },
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": {
          "Ref": "ChefProxyPort"
        },
        "ToPort": {
          "Ref": "ChefProxyPort"
        }
      }
    },
    "ChefProxyElbSGrproxyportoutout": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "ChefProxyElbSG"
        },
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "FromPort": {
          "Ref": "ChefProxyPort"
        },
        "ToPort": {
          "Ref": "ChefProxyPort"
        }
      }
    },
    "ChefProxyElbSGrzabbixinin": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ChefProxyElbSG"
        },
        "IpProtocol": "tcp",
        "CidrIp": {
          "Ref": "VpcCidr"
        },
        "FromPort": "10050",
        "ToPort": "10050"
      }
    },
    "ChefProxyELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "ChefProxyElbSG"
          }
        ],
        "Subnets": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "Scheme": "internal",
        "Listeners": [
          {
            "LoadBalancerPort": {
              "Ref": "ChefProxyPort"
            },
            "Protocol": "TCP",
            "InstancePort": {
              "Ref": "ChefProxyPort"
            },
            "InstanceProtocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "ChefProxyPort"
                }
              ]
            ]
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "6",
          "Interval": "30",
          "Timeout": "10"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true"
        },
        "CrossZone": "true"
      }
    },
    "ChefProxyElbDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": "",
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Domain"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProxyElbCNAME"
              },
              ".",
              {
                "Ref": "Domain"
              },
              "."
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ChefProxyELB",
              "DNSName"
            ]
          }
        ]
      }
    },
    "ProxyASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "ProxyASLC"
        },
        "AvailabilityZones": [
          {
            "Ref": "AZ1"
          },
          {
            "Ref": "AZ2"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "MinSize": {
          "Ref": "ProxyMinAS"
        },
        "MaxSize": {
          "Ref": "ProxyMaxAS"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ChefProxyELB"
          }
        ],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "1800",
        "Cooldown": "1200",
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "OpsAlertsTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "CHEF_PROXY_ASG",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "BootPriority",
            "Value": {
              "Ref": "BootPriority"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Purpose",
            "Value": {
              "Ref": "Purpose"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "project",
            "Value": {
              "Ref": "Project"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "ProxyASLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "InstanceType": {
          "Ref": "ProxyInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "AppInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "ImageId": {
          "Ref": "InstanceAMI"
        },
        "SecurityGroups": [
          {
            "Ref": "InternalAccessSG"
          },
          {
            "Ref": "ExternalAccessSG"
          },
          {
            "Ref": "ChefProxyElbSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": {
                "Ref": "RootDiskSize"
              },
              "VolumeType": "gp2"
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "VirtualName": "ephemeral0"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash",
                "\n",
                "",
                "\n",
                "exec > >(tee /var/log/userdata.log | logger -t userdata -s 2>/dev/console) 2>&1",
                "\n",
                "",
                "\n",
                "export HOME=/root",
                "\n",
                "export PATH=$PATH:/usr/local/sbin",
                "\n",
                "",
                "\n",
                "logger -s -t userdata 'create the environment descriptor file'",
                "\n",
                "",
                "\n",
                "SNCR_AWS_ENV='/usr/local/etc/sncr-aws-env.sh'",
                "\n",
                "",
                "\n",
                "cat <<EOF > $SNCR_AWS_ENV",
                "\n",
                "DOMAIN='",
                {
                  "Ref": "Domain"
                },
                "'",
                "\n",
                "NODENAME='",
                {
                  "Ref": "NodeName"
                },
                "'",
                "\n",
                "NODEINDEX='",
                {
                  "Ref": "NodeIndex"
                },
                "'",
                "\n",
                "PRIVATEBUCKET='",
                {
                  "Ref": "PrivateBucketName"
                },
                "'",
                "\n",
                "PUBLICBUCKET='",
                {
                  "Ref": "PublicBucketName"
                },
                "'",
                "\n",
                "PROJECT_NAME='",
                {
                  "Ref": "Project"
                },
                "'",
                "\n",
                "PROJECT_ENV='",
                {
                  "Ref": "Environment"
                },
                "'",
                "\n",
                "AWS_REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "'",
                "\n",
                "OPS_ALERTS_TOPIC='",
                {
                  "Ref": "OpsAlertsTopic"
                },
                "'",
                "\n",
                "CHEF_ENV='",
                {
                  "Ref": "ChefEnv"
                },
                "'",
                "\n",
                "CHEF_ROLES='",
                {
                  "Ref": "ChefRoles"
                },
                "'",
                "\n",
                "CHEF_ORG='",
                {
                  "Ref": "ChefOrg"
                },
                "'",
                "\n",
                "CHEF_SERVER='",
                {
                  "Ref": "ChefServerURL"
                },
                "'",
                "\n",
                "CHEF_PROXY='",
                {
                  "Ref": "ChefProxyURL"
                },
                "'",
                "\n",
                "EXTRA_HELPER='",
                {
                  "Ref": "ExtraHelper"
                },
                "'",
                "\n",
                "CF_WAIT_HANDLE='",
                {
                  "Ref": "WaitHandle"
                },
                "'",
                "\n",
                "",
                "\n",
                "export DOMAIN NODENAME NODEINDEX",
                "\n",
                "export PRIVATEBUCKET PUBLICBUCKET",
                "\n",
                "export PROJECT_NAME PROJECT_ENV",
                "\n",
                "export AWS_REGION",
                "\n",
                "export OPS_ALERTS_TOPIC",
                "\n",
                "export CHEF_ENV CHEF_ROLES CHEF_ORG CHEF_SERVER CHEF_PROXY",
                "\n",
                "export CF_WAIT_HANDLE",
                "\n",
                "EOF",
                "\n",
                "",
                "\n",
                "chmod 0644 $SNCR_AWS_ENV",
                "\n",
                "chown root:root $SNCR_AWS_ENV",
                "\n",
                ". $SNCR_AWS_ENV",
                "\n",
                "",
                "\n",
                "yum update --security -y",
                "\n",
                "",
                "\n",
                "cd /usr/local/sbin",
                "\n",
                "",
                "\n",
                "logger -s -t userdata 'fetch the helper scripts'",
                "\n",
                "helpers='configure-network.sh mount-disks.sh install-awscli.sh install-chef-client.sh signal-wait-handle.sh sncr-aws-versions.sh'",
                "\n",
                "",
                "\n",
                "if [ -z \"$EXTRA_HELPER\" ]; then",
                "\n",
                "  EXTRA_HELPER=\"none\"",
                "\n",
                "fi",
                "\n",
                "",
                "\n",
                "if [ \"$EXTRA_HELPER\" != \"none\" ]; then",
                "\n",
                "  helpers=\"$helpers $EXTRA_HELPER\"",
                "\n",
                "fi",
                "\n",
                "",
                "\n",
                "",
                "\n",
                "for helper in $helpers; do",
                "\n",
                "  logger -s -t userdata \"Fetching $helper\"",
                "\n",
                "  wget http://${PUBLICBUCKET}.s3.amazonaws.com/public/$helper",
                "\n",
                "  chmod 0544 $helper",
                "\n",
                "  chown root:root $helper",
                "\n",
                "done",
                "\n",
                "",
                "\n",
                "logger -s -t userdata 'move the versions file to /usr/local/etc'",
                "\n",
                "mv -f sncr-aws-versions.sh /usr/local/etc",
                "\n",
                "",
                "\n",
                "install-awscli.sh",
                "\n",
                "mount-disks.sh",
                "\n",
                "configure-network.sh",
                "\n",
                "if [ \"$EXTRA_HELPER\" != \"none\" ]; then",
                "\n",
                "  $EXTRA_HELPER",
                "\n",
                "fi",
                "\n",
                "",
                "\n",
                "install-chef-client.sh",
                "\n",
                "",
                "\n",
                "rc=$?",
                "\n",
                "signal-wait-handle.sh $rc \"install-chef-client ${NODENAME}${NODEINDEX}\"",
                "\n",
                "",
                "\n",
                "echo \"Initiating a reboot\"",
                "\n",
                "sync",
                "\n",
                "sync",
                "\n",
                "reboot",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ProxyScaleUp": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ProxyASG"
        },
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment": {
          "Ref": "ProxyScaleUpCount"
        }
      }
    },
    "ProxyScaleDown": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ProxyASG"
        },
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment": {
          "Ref": "ProxyScaleDownCount"
        }
      }
    },
    "ProxyHighNetInAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "metric GreaterThanThreshold",
        "MetricName": "NetworkIn",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Threshold": {
          "Fn::FindInMap": [
            "BandwidthAlarmsPerInstanceType",
            {
              "Ref": "ProxyInstanceType"
            },
            "high"
          ]
        },
        "Period": "300",
        "EvaluationPeriods": "2",
        "AlarmActions": [
          {
            "Ref": "ProxyScaleUp"
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ProxyASG"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "ProxyLowNetInAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "metric LessThanThreshold",
        "MetricName": "NetworkIn",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Threshold": {
          "Fn::FindInMap": [
            "BandwidthAlarmsPerInstanceType",
            {
              "Ref": "ProxyInstanceType"
            },
            "low"
          ]
        },
        "Period": "300",
        "EvaluationPeriods": "2",
        "AlarmActions": [
          {
            "Ref": "ProxyScaleDown"
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ProxyASG"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs": {
    "ChefProxyUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ProxyElbCNAME"
            },
            ".",
            {
              "Ref": "Domain"
            },
            ":",
            {
              "Ref": "ChefProxyPort"
            }
          ]
        ]
      }
    }
  }
}
